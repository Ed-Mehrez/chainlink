name: Update cache image

#on:
#  schedule:
#     Run every Sunday at midnight
#    - cron: '0 0 * * 0'
#
#  repository_dispatch:
#    types: build-docker-cache
on: push

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      # ssh checkout needed for https://github.com/peter-evans/create-pull-request/blob/master/docs/concepts-guidelines.md#push-using-ssh-deploy-keys
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: '${{ secrets.SSH_PRIVATE_KEY }}'

      - name: Change GITHUB_REF env var because hashes are not allowed in the branch name
        uses: allenevans/set-env@v1.0.0
        with:
          overwrite: true
          GITHUB_REF: "$(echo $GITHUB_REF | sed -e 's/\\#/-/g')"
        #run:
        #  echo "::set-env name=GITHUB_REF::$(echo $GITHUB_REF | sed -e 's/\#/-/g')"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws-region: "us-west-2"
          role-to-assume: "${{ secrets.AWS_ROLE_TO_ASSUME }}"
          role-duration-seconds: 1200

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to AWS ECR
        env:
          ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
          IMAGE_TAG: "${{ github.sha }}"
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG .
          docker push $ECR_REGISTRY:$IMAGE_TAG






      #- name: Install AWS CLI
      #  run: |
      #    curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #    unzip awscliv2.zip
      #    sudo ./aws/install
      #    rm awscliv2.zip

      #- name: Configure AWS CLI
      #  run: |
      #    # Get temporary credentials to access resoures available to specific role
      #    temporaryCredentials=$(
      #      aws sts assume-role \
      #        --role-arn "${AWS_ROLE_TO_ASSUME}" \
      #        --role-session-name "gha-${GITHUB_REPOSITORY}-${GITHUB_WORKFLOW}-${GITHUB_RUN_NUMBER}"
      #    )
      #    echo $temporaryCredentials

      #    # Deconstruct json response, extracting aws credentials
      #    accessKeyID=$(echo $temporaryCredentials | jq .Credentials.AccessKeyId | xargs)
      #    secretAccessKey=$(echo $temporaryCredentials | jq .Credentials.SecretAccessKey | xargs)
      #    sessionToken=$(echo $temporaryCredentials | jq .Credentials.SessionToken | xargs)

      #    # Store aws creds in .aws folder
      #    aws configure set aws_access_key_id ${accessKeyID}
      #    aws configure set aws_secret_access_key ${secretAccessKey}
      #    aws configure set aws_session_token ${sessionToken}

      #    # Override old keys with the temporary ones.
      #    export AWS_ACCESS_KEY_ID="${accessKeyID}"
      #    export AWS_SECRET_ACCESS_KEY="${secretAccessKey}"
      #    export AWS_SESSION_TOKEN="${sessionToken}"

      #    # Use temporary keys to get account ID
      #    accountID=$(aws sts get-caller-identity --output text --query 'Account')

      #    # Allows subsequent steps to use correct credentials
      #    echo "::set-env name=AWS_ACCESS_KEY_ID::${accessKeyID}";
      #    echo "::set-env name=AWS_SECRET_ACCESS_KEY::${secretAccessKey}";
      #    echo "::set-env name=AWS_SESSION_TOKEN::${sessionToken}";
      #    echo "::set-env name=AWS_ACCOUNT_ID::${accountID}";
      #    echo "::set-env name=AWS_ECR_ACCOUNT_URL::${accountID}.dkr.ecr.us-west-2.amazonaws.com/builder-cache"


      #- name: Docker login to ECR
      #  id: login-ecr
      #  run: |
      #    aws ecr get-login-password --region "${AWS_REGION}" --profile "default" | docker login --username AWS --password-stdin "${AWS_ECR_ACCOUNT_URL}"

      #- name: Build and push image to AWS ECR
      #  env:
      #    ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
      #    IMAGE_TAG: "${{ github.sha }}"
      #  run: |
      #    docker build -t $ECR_REGISTRY:$IMAGE_TAG -f ./builder-cache.Dockerfile .
      #    docker push $ECR_REGISTRY:$IMAGE_TAG








      #- name: Change GITHUB_REF env var because hashes are not allowed in the branch name
      #  run:
      #    echo "::set-env name=GITHUB_REF::$(echo $GITHUB_REF | sed -e 's/\#/-/g')"

      #- name: Configure AWS Credentials
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      #    aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #    aws-region: "us-west-2"
      #    role-to-assume: "${{ secrets.AWS_ROLE_TO_ASSUME }}"
      #    role-duration-seconds: 1200

      #- name: Login to AWS ECR
      #  id: login-ecr
      #  uses: aws-actions/amazon-ecr-login@v1

      #- name: Build and push image to AWS ECR
      #  env:
      #    ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
      #    IMAGE_TAG: "${{ github.sha }}"
      #  run: |
      #    docker build -t $ECR_REGISTRY:$IMAGE_TAG .
      #    docker push $ECR_REGISTRY:$IMAGE_TAG





      #- name: Free disk space
      #  run: |
      #    sudo swapoff -a
      #    sudo rm -f /swapfile
      #    sudo apt clean
      #    df -h

      #- name: Update Cache File
      #  id: updateCacheFile
      #  uses: smartcontractkit/docker-cache@99a8aec1b4eb98e0627aefe07223c9d8bec5ba33
      #  with:
      #    actionType: 'UPDATE_CACHE_FILE'

      #- name: Get current date
      #  id: getDate
      #  run: echo "::set-output name=date::$(date -u +"%Y-%m-%dT%H%MZ")"

      #- name: Publish to Docker Hub
      #  uses: elgohr/Publish-Docker-Github-Action@2.14
      #  with:
      #    name: 'smartcontract/builder-cache'
      #    dockerfile: 'builder-cache.Dockerfile'
      #    tags: '${{ steps.updateCacheFile.outputs.builderVersion }}-${{ steps.getDate.outputs.date }}'
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      #- name: Update docker files
      #  uses: smartcontractkit/docker-cache@99a8aec1b4eb98e0627aefe07223c9d8bec5ba33
      #  with:
      #    actionType: 'UPDATE_DOCKER_FILES'

      #- name: Open PR with updated cache and docker files
      #  uses: peter-evans/create-pull-request@v2.7.0
      #  with:
      #    title: 'Update docker cache image'
      #    commit-message: 'Update docker cache image'
